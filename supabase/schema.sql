-- Create media table
CREATE TABLE media (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    creator TEXT,
    type TEXT NOT NULL CHECK (type IN ('reading', 'music', 'tv', 'pictures')),
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    review TEXT,
    notes TEXT,
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    completed BOOLEAN DEFAULT FALSE,
    completion_date DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    user_id UUID REFERENCES auth.users(id)
);

-- Create media_images table for storing image references
CREATE TABLE media_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    media_id BIGINT REFERENCES media(id) ON DELETE CASCADE,
    storage_path TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create RLS policies
ALTER TABLE media ENABLE ROW LEVEL SECURITY;
ALTER TABLE media_images ENABLE ROW LEVEL SECURITY;

-- Policy for authenticated users to read their own media entries
CREATE POLICY "Users can read their own media entries"
ON media FOR SELECT
TO authenticated
USING (user_id = auth.uid());

-- Policy for authenticated users to insert their own media entries
CREATE POLICY "Users can insert their own media entries"
ON media FOR INSERT
TO authenticated
WITH CHECK (user_id = auth.uid());

-- Policy for authenticated users to update their own media entries
CREATE POLICY "Users can update their own media entries"
ON media FOR UPDATE
TO authenticated
USING (user_id = auth.uid());

-- Policy for authenticated users to delete their own media entries
CREATE POLICY "Users can delete their own media entries"
ON media FOR DELETE
TO authenticated
USING (user_id = auth.uid());

-- Policies for media_images
CREATE POLICY "Users can read their own media images"
ON media_images FOR SELECT
TO authenticated
USING (media_id IN (SELECT id FROM media WHERE user_id = auth.uid()));

CREATE POLICY "Users can insert their own media images"
ON media_images FOR INSERT
TO authenticated
WITH CHECK (media_id IN (SELECT id FROM media WHERE user_id = auth.uid()));

CREATE POLICY "Users can delete their own media images"
ON media_images FOR DELETE
TO authenticated
USING (media_id IN (SELECT id FROM media WHERE user_id = auth.uid()));

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updating updated_at
CREATE TRIGGER update_media_updated_at
    BEFORE UPDATE ON media
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 